#!/bin/bash

# save the current stdout to file descriptor 6.
# any script can use it to send data throught the ssh tunnel
#   usage: command 2>&6 1>&6
exec 6>&1

# simple function to check if some dir has been created
makedir(){
  DIR=$1
  if ! (mkdir -p "${DIR}" &&
        test -O "${DIR}" && test -r "${DIR}" &&
        test -w "${DIR}" && test -x "${DIR}"); then
    return 1
  else
    return 0
  fi
}

# create temp dir, hang if fails
TEMPDIR="/tmp/sdi-agent"
if ! makedir "${TEMPDIR}"; then
  echo "failed to create ${TEMPDIR} directory (hang)"
  exit 1
fi

# create default streams directorie
STREAMSDIR="${TEMPDIR}/streams"
makedir "${STREAMSDIR}" &>/dev/null || exit 1
chmod 700 "${STREAMSDIR}"

# streams control
STREAMDIR=`mktemp -d "${STREAMSDIR}/agent.XXXXXXXXXX"`
test "$?" = 0 || exit 1
makedir "${STREAMDIR}" &>/dev/null || exit 1

# lock directory to control writing to output file
OUTPUTLOCK=`mktemp -d "${STREAMDIR}/lock.XXXXXXXXXX"`
test "$?" = 0 || exit 1
makedir "${OUTPUTLOCK}" &>/dev/null || exit 1

# configure output file and fifo to send output to webserver
SDIOUTPUT="${STREAMDIR}/stream"
SDIFIFO="${STREAMDIR}/sdi.fifo"

# create the fifo file
mkfifo "${SDIFIFO}"
test "$?" = 0 || exit 1

# be sure the output lock is gone so we can start using it
# and also create the output file itself
rm -Rf "${OUTPUTLOCK}"
> "${SDIOUTPUT}"
test "$?" = 0 || exit 1

# WSADDR is set when creating the connection
# it represents the webserver address to communicate

# credentials and default wget HTTPS related parameters
# USER/PASSWORD must come from the connection
WSUSER="user"
WSPASS="senha"
WGETPARAMS="--no-check-certificate --auth-no-challenge \
--http-user=${WSUSER} --http-password=${WSPASS}"


# will send the current commands output to the main server
# safely copy the output file and send it as post data appending the node id
# keeps trying until succeeds or die
send(){
  while ! mkdir "${OUTPUTLOCK}" 2>/dev/null; do sleep 0.1; done
  DATA=$(cat "${SDIOUTPUT}")
  > "${SDIOUTPUT}"
  rm -Rf "${OUTPUTLOCK}"

  test "${DATA}" = "" && return
  DATA="${MYID}\n${DATA}"

  # try our best to create a post file
  CNT=0
  while true; do
    FILE=`mktemp "${STREAMDIR}/post.XXXXXXXXXX"`
    test "$?" = 0 && break
    sleep 0.3
    ((CNT=CNT+1))
    test "${CNT}" -gt 30 && return 1
  done

  # try to send the commands results
  CNT=0
  echo -e "${DATA}" > "${FILE}"
  while true; do
    wget ${WGETPARAMS} --post-file "${FILE}" -O/dev/null -o/dev/null \
      -T 30 -t 1 "${WSADDR}"
    test "$?" = 0 && break
    ((CNT=CNT+1))
    test "${CNT}" -gt 30 && (rm -f "${FILE}"; return 1)
  done
  rm -f "${FILE}"
  return 0
}

# simple watchdog to trigger the send function
# this will allow the output to be buffered for some time before sending
# data to the server
watchdog(){
  while true; do
    BLOCKS=`stat -c"%b" "${SDIOUTPUT}"`
    test "$?" != 0 && return 1
    if test ${BLOCKS} -gt 0; then
      send
      test "$?" != 0 && return 1
    fi
    sleep 0.5
  done
}

# reads data from a fifo file and safely write it to the output file
reader(){
  while read -r; do
    while ! mkdir "${OUTPUTLOCK}" 2>/dev/null; do sleep 0.1; done
    echo "${REPLY}" >> "${SDIOUTPUT}"
    rm -Rf "${OUTPUTLOCK}"
  done < "${SDIFIFO}"
}

# start the reader and the watchdog
reader & watchdog &

# redirects all output to the fifo
exec >>"${SDIFIFO}" 2>&1

